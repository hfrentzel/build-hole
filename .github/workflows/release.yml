# Read index.json to determine what builds don't exist, and create a matrix
# to do those builds
on: push

jobs:
  find_missing:
    runs-on: ubuntu-latest
    outputs: 
      missing: ${{ steps.missing.outputs.missing }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate missing list
        id: missing
        run: echo "missing=$(./scripts/find_missing.py)" >> "$GITHUB_OUTPUT"

  create_builds:
    runs-on: ${{ matrix.runner }}
    needs: find_missing
    defaults:
      run:
        working-directory: ${{ matrix.working_dir || '.' }}
    env:
      ARCHIVE_DIR: ${{ matrix.name }}_${{ matrix.version }}_${{ matrix.env }}
      GOARCH: ${{ matrix.goarch }}
      GOOS: ${{ matrix.goos }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.find_missing.outputs.missing)}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with: 
          repository: ${{ matrix.repo }}
          ref: ${{matrix.tag || matrix.version}}
          submodules: ${{ matrix.recurse && 'recursive' || '' }}

      - name: Create archive directory
        shell: bash
        run: |
          git tag -f ${{matrix.version}}
          mkdir -p $ARCHIVE_DIR/bin

      - name: Pre-build steps
        if: ${{ matrix.prebuild }}
        shell: bash
        run: ${{ matrix.prebuild }}

      - name: Install go
        if: ${{ matrix.type == 'go' }}
        uses: actions/setup-go@v5
        with: 
          go-version: '^1.23'

      - name: Override goreleaser file
        if: ${{ matrix.type == 'go' }}
        shell: bash
        run: |
          cat <<EOF > .goreleaser.yml
          version: 2
          git:
            tag_sort: -version:creatordate
          before:
            hooks:
              - go mod tidy
          builds:
            - id: ${{ matrix.name }}
              main: ${{ matrix.entrypoint || '.' }}
              targets:
                - linux_amd64
                - linux_arm64
                - windows_amd64
              ldflags:
                - -s -w ${{ matrix.flags }}
          EOF
          cat .goreleaser.yml

      - name: Build Go Binary
        uses: goreleaser/goreleaser-action@v6
        if: ${{ matrix.type == 'go' }}
        with:
          workdir: ${{ matrix.working_dir || '.' }}
          args: build --single-target -o ${{ env.ARCHIVE_DIR }}/bin/${{ matrix.name }} --id ${{ matrix.name }} --skip=validate

      - name: Install rust toolchain
        if: ${{ matrix.type == 'cargo' }}
        uses: actions-rust-lang/setup-rust-toolchain@v1.12.0
        with:
          target: ${{ matrix.target }}
          cache: false

      - name: Install cross
        if: ${{ matrix.type == 'cargo' }}
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build Rust Binary
        if: ${{ matrix.type == 'cargo' }}
        shell: bash
        env: 
          CARGO_PROFILE_RELEASE_DEBUG: 0
          CARGO_PROFILE_RELEASE_STRIP: symbols
          CARGO_PROFILE_RELEASE_LTO: true
        run: |
          cargo build --release --target=${{ matrix.target }} ${{ matrix.flags }}
          cp target/${{ matrix.target }}/release/${{ matrix.exe_name || matrix.name }} \
            $ARCHIVE_DIR/bin/

      - name: Package assets
        if: ${{ matrix.package }}
        shell: bash
        env:
          TARGET: ${{ matrix.target }}
          VERSION: ${{ matrix.version }}
        run: ${{ matrix.package }}

      - name: Verify Binary
        shell: bash
        run: |
          filename=${{ matrix.exe_name || matrix.name }}
          if [ ${{ matrix.goos }} == "windows" ]; then
            if ! [ -f $ARCHIVE_DIR/bin/$filename.exe ]; then
              mv $ARCHIVE_DIR/bin/$filename $ARCHIVE_DIR/bin/$filename.exe
            fi
          fi
          file $ARCHIVE_DIR/bin/$filename

      - name: Bundle tarball
        shell: bash
        run: |
          tar czf $ARCHIVE_DIR.tar.gz $ARCHIVE_DIR
          tar -tf $ARCHIVE_DIR.tar.gz

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os != 'windows-latest' }}
        with:
          name: ${{ env.ARCHIVE_DIR }}.tar.gz
          path: ${{ matrix.working_dir || '.' }}/${{ env.ARCHIVE_DIR }}.tar.gz
          compression-level: 0
          retention-days: 1

  create_release:
    if: github.ref == 'refs/heads/master'
    needs: create_builds
    runs-on: ubuntu-latest
    outputs:
      manifest: ${{ steps.release.outputs.manifest}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Retrieve artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts

      - name: Create Manifest and Release info
        id: release
        run: |
          RELEASE_NAME=$(date +%Y-%m-%dT%H%M)
          echo "RELEASE_NAME=$RELEASE_NAME" >> "$GITHUB_ENV"
          { 
            echo 'manifest<<EOF'
            echo $RELEASE_NAME
            ls -1 artifacts
            echo EOF
          } >> "$GITHUB_OUTPUT"
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd artifacts
          gh release create $RELEASE_NAME $(ls -x)


  update_hole:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update hole.json
        run: |
          echo "${{ needs.create_release.outputs.manifest }}" > manifest.txt
          cat manifest.txt
          ./scripts/update_hole.py
          cat hole.json

      - name: Push changes
        run: |
          git add hole.json
          git config --global user.name "Github Actions"
          git config --global user.email "hfrentzel@users.noreply.github.com"
          git commit -m "Update hole"
          git push origin master
